# Example GitHub Actions workflow for smart contract deployment
# Place this file in .github/workflows/ in your contract repository

name: Deploy Smart Contracts

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      network:
        description: 'Target network'
        required: true
        default: 'sepolia'
        type: choice
        options:
        - sepolia
        - mainnet
        - polygon
        - arbitrum

env:
  FOUNDRY_PROFILE: ci

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run tests
        run: forge test -vvv

  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Deploy to Sepolia
        uses: block-contract-ci/smart-contract-deploy@v1
        id: deploy-staging
        with:
          network: sepolia
          rpc-url: ${{ secrets.SEPOLIA_RPC_URL }}
          private-key: ${{ secrets.SEPOLIA_PRIVATE_KEY }}
          deploy-script: script/Deploy.s.sol
          etherscan-api-key: ${{ secrets.ETHERSCAN_API_KEY }}
          verify-contracts: true

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Staging Deployment Complete**
              
              **Implementation:** \`${{ steps.deploy-staging.outputs.implementation-address }}\`
              **Proxy:** \`${{ steps.deploy-staging.outputs.proxy-address }}\`
              **Transaction:** \`${{ steps.deploy-staging.outputs.transaction-hash }}\`
              **Gas Used:** \`${{ steps.deploy-staging.outputs.gas-used }}\`
              **Verified:** \`${{ steps.deploy-staging.outputs.verified }}\`
              
              [View on Etherscan](https://sepolia.etherscan.io/address/${{ steps.deploy-staging.outputs.implementation-address }})`
            })

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Deploy to Mainnet
        uses: block-contract-ci/smart-contract-deploy@v1
        with:
          network: mainnet
          rpc-url: ${{ secrets.MAINNET_RPC_URL }}
          private-key: ${{ secrets.MAINNET_PRIVATE_KEY }}
          deploy-script: script/Deploy.s.sol
          proxy-address: ${{ secrets.MAINNET_PROXY_ADDRESS }} # For upgrades
          etherscan-api-key: ${{ secrets.ETHERSCAN_API_KEY }}
          verify-contracts: true
          gas-limit: 5000000

  deploy-manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Deploy to ${{ github.event.inputs.network }}
        uses: block-contract-ci/smart-contract-deploy@v1
        with:
          network: ${{ github.event.inputs.network }}
          rpc-url: ${{ secrets[format('{0}_RPC_URL', upper(github.event.inputs.network))] }}
          private-key: ${{ secrets[format('{0}_PRIVATE_KEY', upper(github.event.inputs.network))] }}
          deploy-script: script/Deploy.s.sol
          etherscan-api-key: ${{ secrets.ETHERSCAN_API_KEY }}
          verify-contracts: true